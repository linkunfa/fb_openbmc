From b1d5d270e8c44e1d75c498e1d179440040439567 Mon Sep 17 00:00:00 2001
From: Tomer Maimon <tmaimon77@gmail.com>
Date: Mon, 13 Feb 2023 16:09:13 +0200
Subject: [PATCH] iio: adc: Add calibration support to npcm ADC

Add calibration to improve accuracy measurement when using
internal reference voltage.
The calibration values taken are from the FUSE module.

We will push this change upstream for reviewing soon.

Signed-off-by: Tomer Maimon <tmaimon77@gmail.com>
Signed-off-by: Tyrone Ting <kfting@nuvoton.com>
---
 drivers/iio/adc/npcm_adc.c | 188 ++++++++++++++++++++++++++++++++++++-
 1 file changed, 187 insertions(+), 1 deletion(-)

diff --git a/drivers/iio/adc/npcm_adc.c b/drivers/iio/adc/npcm_adc.c
index 3d9207c160eb..7f203cf9cdff 100644
--- a/drivers/iio/adc/npcm_adc.c
+++ b/drivers/iio/adc/npcm_adc.c
@@ -22,9 +22,16 @@ struct npcm_adc_info {
 	u32 data_mask;
 	u32 internal_vref;
 	u32 res_bits;
+	u32 min_val;
+	u32 max_val;
+	u32 const_r1;
+	u32 const_r2;
+	u32 calib_addr;
 };
 
 struct npcm_adc {
+	u32 R05;
+	u32 R15;
 	bool int_status;
 	u32 adc_sample_hz;
 	struct device *dev;
@@ -64,17 +71,55 @@ struct npcm_adc {
 
 #define NPCM_ADC_ENABLE		(NPCM_ADCCON_ADC_EN | NPCM_ADCCON_ADC_INT_EN)
 
-/* ADC General Definition */
+/* FUSE registers */
+#define NPCM_FUSE_FST		0x00
+#define NPCM_FUSE_FADDR		0x04
+#define NPCM_FUSE_FDATA		0x08
+#define NPCM_FUSE_FCFG		0x0C
+#define NPCM_FUSE_FCTL		0x14
+
+/* FST Register Bits */
+#define NPCM_FUSE_FST_RDY	BIT(0)
+#define NPCM_FUSE_FST_RDST	BIT(1)
+
+/* FADDR Register Bits */
+#define NPCM_FUSE_FADDR_BYTEADDR	BIT(0)
+#define NPCM_FUSE_FADDR_BYTEADDR_MASK	GENMASK(9, 0)
+
+/* FADDR Register Bits */
+#define NPCM_FUSE_FDATA_DATA		BIT(0)
+#define NPCM_FUSE_FDATA_CLEAN_VALUE	BIT(1)
+#define NPCM_FUSE_FDATA_DATA_MASK	GENMASK(7, 0)
+
+/* FCTL Register Bits */
+#define NPCM_FUSE_FCTL_RDST		BIT(1)
+
+/* ADC Calibration Definition */
+#define FUSE_CALIB_SIZE		8
+#define DATA_CALIB_SIZE		4
+#define FUSE_READ_SLEEP		500
+#define FUSE_READ_TIMEOUT	1000000
+
 static const struct npcm_adc_info npxm7xx_adc_info = {
 	.data_mask = GENMASK(9, 0),
 	.internal_vref = 2048,
 	.res_bits = 10,
+	.min_val = 0,
+	.max_val = 1023,
+	.const_r1 = 512,
+	.const_r2 = 768,
+	.calib_addr = 24
 };
 
 static const struct npcm_adc_info npxm8xx_adc_info = {
 	.data_mask = GENMASK(11, 0),
 	.internal_vref = 1229,
 	.res_bits = 12,
+	.min_val = 0,
+	.max_val = 4095,
+	.const_r1 = 1024,
+	.const_r2 = 3072,
+	.calib_addr = 40
 };
 
 #define NPCM_ADC_CHAN(ch) {					\
@@ -97,6 +142,119 @@ static const struct iio_chan_spec npcm_adc_iio_channels[] = {
 	NPCM_ADC_CHAN(7),
 };
 
+static void npcm_fuse_read(struct regmap *fuse_regmap, u32 addr, u8 *data)
+{
+	u32 val;
+	u32 fstreg;
+
+	regmap_read_poll_timeout(fuse_regmap, NPCM_FUSE_FST, fstreg,
+				 fstreg & NPCM_FUSE_FST_RDY, FUSE_READ_SLEEP,
+				 FUSE_READ_TIMEOUT);
+	regmap_write_bits(fuse_regmap, NPCM_FUSE_FST,
+			  NPCM_FUSE_FST_RDST, NPCM_FUSE_FST_RDST);
+
+	regmap_write_bits(fuse_regmap, NPCM_FUSE_FADDR,
+			  NPCM_FUSE_FADDR_BYTEADDR_MASK, addr);
+	regmap_read(fuse_regmap, NPCM_FUSE_FADDR, &val);
+	regmap_write(fuse_regmap, NPCM_FUSE_FCTL, NPCM_FUSE_FCTL_RDST);
+
+	regmap_read_poll_timeout(fuse_regmap, NPCM_FUSE_FST, fstreg,
+				 fstreg & NPCM_FUSE_FST_RDY, FUSE_READ_SLEEP,
+				 FUSE_READ_TIMEOUT);
+	regmap_write_bits(fuse_regmap, NPCM_FUSE_FST,
+			  NPCM_FUSE_FST_RDST, NPCM_FUSE_FST_RDST);
+
+	regmap_read(fuse_regmap, NPCM_FUSE_FDATA, &val);
+	*data = (u8)val;
+
+	regmap_write_bits(fuse_regmap, NPCM_FUSE_FDATA, NPCM_FUSE_FDATA_DATA_MASK,
+			  NPCM_FUSE_FDATA_CLEAN_VALUE);
+}
+
+static int npcm_ECC_to_nibble(u8 ECC, u8 nibble)
+{
+	u8 nibble_b0 = (nibble >> 0) & BIT(0);
+	u8 nibble_b1 = (nibble >> 1) & BIT(0);
+	u8 nibble_b2 = (nibble >> 2) & BIT(0);
+	u8 nibble_b3 = (nibble >> 3) & BIT(0);
+	u8 tmp_ECC = nibble;
+
+	tmp_ECC |= (nibble_b0 ^ nibble_b1) << 4 | (nibble_b2 ^ nibble_b3) << 5 |
+		(nibble_b0 ^ nibble_b2) << 6  | (nibble_b1 ^ nibble_b3) << 7;
+
+	if (tmp_ECC != ECC)
+		return -EINVAL;
+
+	return 0;
+}
+
+static int npcm_ECC_to_byte(u16 ECC, u8 *Byte)
+{
+	u8 nibble_L, nibble_H;
+	u8 ECC_L, ECC_H;
+
+	ECC_H = ECC >> 8;
+	nibble_H = ECC_H & 0x0F;
+	ECC_L = ECC >> 0;
+	nibble_L = ECC_L & 0x0F;
+
+	if (npcm_ECC_to_nibble(ECC_H, nibble_H) != 0 ||
+	    npcm_ECC_to_nibble(ECC_L, nibble_L) != 0)
+		return -EINVAL;
+
+	*Byte = nibble_H << 4 | nibble_L << 0;
+
+	return 0;
+}
+
+static int npcm_read_nibble_parity(u8 *block_ECC, u8 *ADC_calib)
+{
+	int i;
+	u16 ECC;
+
+	for (i = 0; i < DATA_CALIB_SIZE; i++) {
+		memcpy(&ECC, block_ECC + (i * 2), 2);
+		if (npcm_ECC_to_byte(ECC, &ADC_calib[i]) != 0)
+			return -EINVAL;
+	}
+
+	return 0;
+}
+
+static int npcm_fuse_calibration_read(struct platform_device *pdev,
+				      struct npcm_adc *info)
+{
+	struct device_node *np = pdev->dev.of_node;
+	struct regmap *fuse_regmap;
+	ssize_t bytes_read = 0;
+	u8 read_buf[8];
+	u32 ADC_calib;
+	u32 addr = info->data->calib_addr;
+
+	fuse_regmap = syscon_regmap_lookup_by_phandle(np, "syscon");
+	if (IS_ERR(fuse_regmap)) {
+		dev_warn(&pdev->dev, "Failed to find syscon\n");
+		return PTR_ERR(fuse_regmap);
+	}
+
+	while (bytes_read < FUSE_CALIB_SIZE) {
+		npcm_fuse_read(fuse_regmap, addr,
+			       &read_buf[bytes_read]);
+		bytes_read++;
+		addr++;
+	}
+
+	if (npcm_read_nibble_parity(read_buf, (u8 *)&ADC_calib)) {
+		dev_warn(info->dev, "FUSE Calibration read failed\n");
+		return -EINVAL;
+	}
+
+	info->R05 = ADC_calib & 0xFFFF;
+	info->R15 = ADC_calib >> 16;
+
+	return 0;
+}
+
 static irqreturn_t npcm_adc_isr(int irq, void *data)
 {
 	u32 regtemp;
@@ -152,6 +310,29 @@ static int npcm_adc_read(struct npcm_adc *info, int *val, u8 channel)
 	return 0;
 }
 
+static void npcm_adc_calibration(int *val, struct npcm_adc *info)
+{
+	int mul_val;
+	int offset_val;
+
+	mul_val = info->data->const_r1 * (*val - info->R15);
+	if (mul_val < 0) {
+		mul_val = mul_val * -1;
+		offset_val = DIV_ROUND_CLOSEST(mul_val,
+					       (info->R15 - info->R05));
+		*val = info->data->const_r2 - offset_val;
+	} else {
+		offset_val = DIV_ROUND_CLOSEST(mul_val,
+					       (info->R15 - info->R05));
+		*val = info->data->const_r2 + offset_val;
+	}
+
+	if (*val < info->data->min_val)
+		*val = info->data->min_val;
+	if (*val > info->data->max_val)
+		*val = info->data->max_val;
+}
+
 static int npcm_adc_read_raw(struct iio_dev *indio_dev,
 			     struct iio_chan_spec const *chan, int *val,
 			     int *val2, long mask)
@@ -169,6 +350,10 @@ static int npcm_adc_read_raw(struct iio_dev *indio_dev,
 			dev_err(info->dev, "NPCM ADC read failed\n");
 			return ret;
 		}
+
+		if ((info->R05 || info->R15) && IS_ERR(info->vref))
+			npcm_adc_calibration(val, info);
+
 		return IIO_VAL_INT;
 	case IIO_CHAN_INFO_SCALE:
 		if (!IS_ERR(info->vref)) {
@@ -282,6 +467,7 @@ static int npcm_adc_probe(struct platform_device *pdev)
 			  info->regs + NPCM_ADCCON);
 	}
 
+	npcm_fuse_calibration_read(pdev, info);
 	init_waitqueue_head(&info->wq);
 
 	reg_con = ioread32(info->regs + NPCM_ADCCON);
-- 
2.34.1

